% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cal_repeat.R
\name{cal_repeat}
\alias{cal_repeat}
\title{Combinatorial operation between multiple groups of repeated samples}
\usage{
cal_repeat(
  data,
  y = NULL,
  x = NULL,
  treat_reserve = NULL,
  multi_vars = NULL,
  class_name = NULL,
  var_name = NULL,
  FUN = "-"
)
}
\arguments{
\item{data}{The data should be a data frame that could be long or wide data, details, for example.}

\item{y}{A specified active object between two groups defaults to NULL if not specified}

\item{x}{A specified passive object between two groups defaults to NULL if not specified.}

\item{treat_reserve}{Using this parameter when processing variables are in the data set means that computes all subsets of the selected processing cases in the data set. The value of this parameter cannot exceed five. Do not set it as the default.}

\item{multi_vars}{When the data is long, use the parameter to select the target variable for comparison. If consider multiple variables between multiple groups of duplicate samples, the default value is NULL if not specified. 
If specified, select the columns of the corresponding variables in the data frame (for example, 4:5, fourth and fifth column variables). 
When the data is wide, use the parameter to compare the groupâ€”for example, the groups X2001 through X2005 in examples, or 7:11 columns in the data.}

\item{class_name}{Specifies the name of the variable to classify. After parameter is specified, it is divided into active or passive objects. It is only used for long data (because it needs to be identified when transposed to wide data). For wide data, use the default value.}

\item{var_name}{The parameter specification means only running evaluations of a single target variable. If the data is long, multi_vars and the parameter cannot be set simultaneously. If you don't specify the parameter, indicate the default value.}

\item{FUN}{A function to use on the outer products, found via match.fun (except for the special case "*", "-", "/", "+").}
}
\description{
This function can perform combinatorial computations on multiple sets of repeated samples, specifically to perform calculations (subtraction, addition, multiplication, division, etc.) 
in specifying x and y (two columns) under a category, as well as to compare all combinations.
}
\examples{

# Trial data sets (Refer to the data structure of the example)
# long data
treat1 <- c("YES", "NO")
treat2 <- c("A", "B", "C")
treat3 <- c("a", "b", "c")
treat4 <- c("e", "f", "g")
treat5 <- c("D", "E")
class <- 2001:2005
vars_long <- expand.grid(treat1, treat2, treat3, treat4, treat5, class, stringsAsFactors = FALSE)

set.seed(1)
data_long <- data.frame(vars_long,
                    A = rnorm(n = nrow(vars_long), mean = 450, sd = 35),
                    B = rnorm(n = nrow(vars_long), mean = 100, sd = 5),
                    C = rnorm(n = nrow(vars_long), mean = 50, sd = 2)); data_long

 
# wide data
vars_wide <- expand.grid(treat1, treat2, treat3, treat4, treat5)
vars <-  rep(rep(LETTERS[1:3], each = 3), nrow(vars_wide))

set.seed(1)
data_wide <- data.frame(vars, vars_wide,  
                    "2001" = rnorm(length(vars), mean = 100, sd = 10),
                    "2002" = rnorm(length(vars), mean = 200, sd = 10),
                    "2003" = rnorm(length(vars), mean = 300, sd = 10),
                    "2004" = rnorm(length(vars), mean = 400, sd = 10),
                    "2005" = rnorm(length(vars), mean = 500, sd = 10)); data_wide
                     

#1 For long data, consider multiple variables
result1 <- cal_repeat(data = data_long, multi_vars = 7:9, treat_reserve = NULL, 
                   class_name = "Var6", var_name = NULL, y = NULL, x = NULL,
                   FUN = "-"); result1

result1.1 <- cal_repeat(data = data_long, multi_vars = 7:8, treat_reserve = NULL, 
                     class_name = "Var6", var_name = NULL, y = NULL, x = NULL,
                     FUN = "-"); result1.1


#1.2 Specify a single variable
result2 <- cal_repeat(data = data_long, y = NULL, x = NULL, multi_vars = NULL, 
                      class_name = "Var6", treat_reserve = NULL, 
                      var_name = "B", FUN = "-"); result2

result2.1 <- cal_repeat(data = data_long, y = NULL, x = NULL, multi_vars = NULL, 
                        class_name = "Var6", treat_reserve = NULL, 
                        var_name = "A", FUN = "-"); result2.1


#1.3 Specify a single variable and specify x and y
result3 <- cal_repeat(data = data_long, y = "2005", x = "2001", multi_vars = NULL, 
                      class_name = "Var6", treat_reserve = NULL,  
                      var_name = "B", FUN = "-"); result3


#1.4 Specify other categorical variable names
result4 <- cal_repeat(data = data_long, y = "E", x = "D", multi_vars = NULL,
                      class_name = "Var5", treat_reserve = NULL, 
                      var_name = "B", FUN = "-"); result4
 
result4.1 <- cal_repeat(data = data_long, class_name = "Var5", multi_vars = NULL,
                        treat_reserve = NULL, y = NULL, x = NULL,
                        var_name = "B", FUN = "-"); result4.1
 
result4.2 <- cal_repeat(data = data_long, multi_vars = 7:8, var_name = NULL, 
                        treat_reserve = NULL, y = NULL, x = NULL,
                        class_name = "Var5", FUN = "-"); result4.2
 
 
#2.1 For wide data, consider multiple variables
result5 <- cal_repeat(data = data_wide, y = NULL, x = NULL, multi_vars = 7:9, 
                      treat_reserve = NULL, class_name = NULL, var_name = NULL, 
                      FUN = "-"); result5
                      
result5.1 <- cal_repeat(data = data_wide, y = NULL, x = NULL, multi_vars = 7:9, 
                        treat_reserve = NULL, class_name = NULL, var_name = "A", 
                        FUN = "-"); result5.1
 
#2.2 Specify x and y
result6 <- cal_repeat(data = data_wide, y = "X2002", x = "X2001", multi_vars = NULL, 
                      treat_reserve = NULL, class_name = NULL, var_name = NULL, 
                      FUN = "-"); result6
                      
result6.1 <- cal_repeat(data = data_wide, y = "X2002", x = "X2001", multi_vars = NULL, 
                      treat_reserve = NULL, class_name = NULL, var_name = "A", 
                      FUN = "-"); result6.1
                      
                        
#3.1 More control variables
# for long data
result7 <- cal_repeat(data = data_long, y = NULL, x = NULL, 
                      treat_reserve = c("Var1", "Var2"), var_name = NULL,
                      multi_vars = 7:8, class_name = "Var6", 
                      FUN = "-"); result7

result7.1 <- cal_repeat(data = data_long, y = NULL, x = NULL, 
                      treat_reserve = c("Var1", "Var2", "Var3"), var_name = NULL,
                      multi_vars = 7:8, class_name = "Var6", 
                      FUN = "-"); result7.1     
                      
result7.2 <- cal_repeat(data = data_long, y = "2002", x = "2001", 
                      treat_reserve = c("Var1", "Var2", "Var3"), var_name = NULL,
                      multi_vars = NULL, class_name = "Var6", 
                      FUN = "-"); result7.2   
                                                                                                                      
result7.3 <- cal_repeat(data = data_long, y = "2002", x = "2001", 
                       treat_reserve = c("Var1", "Var2", "Var3", "Var4", "Var5"),
                       var_name = NULL, multi_vars = NULL, class_name = "Var6", 
                       FUN = "-"); result7.3                         
                   
# for wide data
result8 <- cal_repeat(data = data_wide,  y = NULL, x = NULL,
                       treat_reserve = c("Var1", "Var2"), 
                       multi_vars = 7:9, class_name = NULL, var_name = NULL,
                       FUN = "-"); result8

result8.1 <- cal_repeat(data = data_wide,  y = "X2002", x = "X2001",
                       treat_reserve = c("Var1", "Var2", "Var3"), 
                       multi_vars = NULL, class_name = NULL, var_name = NULL,
                       FUN = "-"); result8.1


#4.1 Other calculation methods (such as division)
result9 <- cal_repeat(data = data_long, multi_vars = 7:8, treat_reserve = NULL, 
                       class_name = "Var6", var_name = NULL, y = NULL, x = NULL,
                       FUN = "/"); result9
       
       
                                                   
}
\author{
Haowei Ni <jylande@163.com >
}
